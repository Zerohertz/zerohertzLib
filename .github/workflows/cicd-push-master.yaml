name: "CI/CD Pipeline (Push: master)"

on:
  push:
    branches:
      - master

permissions:
  contents: write
  actions: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    # [`master` Push] "Merge pull request*"
    if: |
      startsWith(github.event.head_commit.message, 'Merge pull request')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-python-venv-${{ matrix.python-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-python-venv-${{ matrix.python-version }}-

      - name: Install build tools
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install build
          pip uninstall zerohertzLib -y
          python -m build .
          pip install .'[all]' --no-cache-dir

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ env.PYTHON_VERSION == matrix.python-version }}
        with:
          name: build-artifacts
          path: dist

  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-python-venv-${{ matrix.python-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-python-venv-${{ matrix.python-version }}-

      - name: Run tests
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_BOT_CHANNEL: ${{ secrets.DISCORD_BOT_CHANNEL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          source venv/bin/activate
          sudo apt update
          sudo apt install python3-opencv -y
          pip install pytest pytest-cov
          PYTHONPATH=. pytest --cov=zerohertzLib --cov-report=xml --junitxml=junit.xml -o junit_family=legacy

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        with:
          flags: python${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
        if: always()

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: python${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
        if: always()

  deploy-github:
    runs-on: ubuntu-latest
    # [`master` Push] "Merge pull request*/dev-" (Except "Merge pull request*/chore-")
    if: |
      startsWith(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'dev-') &&
      !contains(github.event.head_commit.message, 'chore-')
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Tag and push
        env:
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=$(cat zerohertzLib/__init__.py | grep __version__ | sed 's/.*= "\(.*\)"/\1/')
          git config --global user.email "ohg3417@gmail.com"
          git config --global user.name "${GH_USERNAME}"
          git config --global credential.helper "!f() { echo username=${GH_USERNAME}; echo password=${GH_TOKEN}; }; f"
          git tag ${VERSION}
          git push origin ${VERSION}

  deploy-pypi:
    runs-on: ubuntu-latest
    # [`master` Push] "Merge pull request*/dev-" (Except "Merge pull request*/chore-")
    if: |
      startsWith(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'dev-') &&
      !contains(github.event.head_commit.message, 'chore-')
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: venv
          key: ${{ runner.os }}-python-venv-${{ env.PYTHON_VERSION }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-python-venv-${{ env.PYTHON_VERSION }}-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Deploy to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          source venv/bin/activate
          pip install twine
          twine upload -u __token__ -p ${PYPI_TOKEN} dist/*
